import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { ChurchSession, DonationStats } from '../types';
import { supabase } from '../utils/supabase';
import { 
  DollarSign, 
  Users, 
  TrendingUp, 
  Calendar,
  Plus,
  Download,
  RefreshCw
} from 'lucide-react';

interface DashboardProps {
  session: ChurchSession;
}

interface QuickStats {
  totalMembers: number;
  todayDonations: number;
  thisMonthDonations: number;
  recentDonations: any[];
}

const Dashboard: React.FC<DashboardProps> = ({ session }) => {
  const [stats, setStats] = useState<QuickStats>({
    totalMembers: 0,
    todayDonations: 0,
    thisMonthDonations: 0,
    recentDonations: []
  });
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    loadDashboardData();
  }, [session.churchId]);

  const loadDashboardData = async () => {
    try {
      setIsLoading(true);
      setError('');

      console.log('🔍 Dashboard 데이터 로딩 시작...');
      console.log('Current churchId:', session.churchId);

      const today = new Date().toISOString().split('T')[0];
      
      // 이번 달 첫날과 다음 달 첫날 계산 (올바른 방법)
      const now = new Date();
      const thisMonthStart = new Date(now.getFullYear(), now.getMonth(), 1).toISOString().split('T')[0];
      const nextMonthStart = new Date(now.getFullYear(), now.getMonth() + 1, 1).toISOString().split('T')[0];

      console.log('Today:', today);
      console.log('This month start:', thisMonthStart);
      console.log('Next month start:', nextMonthStart);

      // 병렬로 데이터 조회
      const [membersResult, todayDonationsResult, monthDonationsResult, recentDonationsResult] = await Promise.all([
        // 총 교인 수
        supabase
          .from('members')
          .select('member_id', { count: 'exact' })
          .eq('church_id', session.churchId)
          .eq('status', 'active'),

        // 오늘 헌금
        supabase
          .from('donations')
          .select('amount')
          .eq('church_id', session.churchId)
          .eq('donation_date', today)
          .eq('status', 'active'),

        // 이번 달 헌금 (수정된 날짜 범위)
        supabase
          .from('donations')
          .select('amount')
          .eq('church_id', session.churchId)
          .gte('donation_date', thisMonthStart)
          .lt('donation_date', nextMonthStart)
          .eq('status', 'active'),

        // 최근 헌금 내역 (10건)
        supabase
          .from('donations')
          .select(`
            donation_id,
            amount,
            donation_date,
            donor_name,
            members (member_name),
            donation_types (type_name)
          `)
          .eq('church_id', session.churchId)
          .eq('status', 'active')
          .order('created_at', { ascending: false })
          .limit(10)
      ]);

      // 결과 로깅
      console.log('👥 Members result:', membersResult);
      console.log('💰 Today donations result:', todayDonationsResult);
      console.log('📊 Month donations result:', monthDonationsResult);
      console.log('📝 Recent donations result:', recentDonationsResult);

      // 에러 체크
      if (membersResult.error) {
        console.error('Members query error:', membersResult.error);
        throw membersResult.error;
      }
      if (todayDonationsResult.error) {
        console.error('Today donations query error:', todayDonationsResult.error);
        throw todayDonationsResult.error;
      }
      if (monthDonationsResult.error) {
        console.error('Month donations query error:', monthDonationsResult.error);
        throw monthDonationsResult.error;
      }
      if (recentDonationsResult.error) {
        console.error('Recent donations query error:', recentDonationsResult.error);
        throw recentDonationsResult.error;
      }

      // 통계 계산
      const todayTotal = todayDonationsResult.data?.reduce((sum, d) => sum + (d.amount || 0), 0) || 0;
      const monthTotal = monthDonationsResult.data?.reduce((sum, d) => sum + (d.amount || 0), 0) || 0;

      console.log('📈 Calculated stats:', {
        totalMembers: membersResult.count,
        todayDonations: todayTotal,
        thisMonthDonations: monthTotal,
        recentDonationsCount: recentDonationsResult.data?.length
      });

      setStats({
        totalMembers: membersResult.count || 0,
        todayDonations: todayTotal,
        thisMonthDonations: monthTotal,
        recentDonations: recentDonationsResult.data || []
      });

    } catch (err: any) {
      console.error('❌ Dashboard data loading error:', err);
      setError('데이터를 불러오는데 실패했습니다: ' + err.message);
    } finally {
      setIsLoading(false);
    }
  };

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('ko-KR', {
      style: 'currency',
      currency: 'KRW'
    }).format(amount);
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('ko-KR', {
      month: 'short',
      day: 'numeric'
    });
  };

  if (isLoading) {
    return (
      <div className="space-y-6">
        <div className="flex items-center justify-between">
          <h2 className="text-2xl font-bold text-gray-900">대시보드</h2>
          <div className="spinner"></div>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          {[1, 2, 3, 4].map(i => (
            <div key={i} className="card animate-pulse">
              <div className="h-4 bg-gray-200 rounded mb-4"></div>
              <div className="h-8 bg-gray-200 rounded"></div>
            </div>
          ))}
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* 헤더 */}
      <div className="flex items-center justify-between">
        <h2 className="text-2xl font-bold text-gray-900">대시보드</h2>
        <div className="flex items-center space-x-3">
          <button
            onClick={loadDashboardData}
            className="btn btn-secondary"
            disabled={isLoading}
          >
            <RefreshCw className="w-4 h-4 mr-2" />
            새로고침
          </button>
          <Link to="/donations" className="btn btn-primary">
            <Plus className="w-4 h-4 mr-2" />
            헌금 등록
          </Link>
        </div>
      </div>

      {/* 에러 메시지 */}
      {error && (
        <div className="alert alert-error">
          {error}
        </div>
      )}

      {/* 통계 카드 */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {/* 총 교인 수 */}
        <div className="card">
          <div className="flex items-center">
            <div className="flex-shrink-0">
              <Users className="w-8 h-8 text-blue-500" />
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-500">총 교인 수</p>
              <p className="text-2xl font-bold text-gray-900">{stats.totalMembers}명</p>
            </div>
          </div>
        </div>

        {/* 오늘 헌금 */}
        <div className="card">
          <div className="flex items-center">
            <div className="flex-shrink-0">
              <DollarSign className="w-8 h-8 text-green-500" />
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-500">오늘 헌금</p>
              <p className="text-2xl font-bold text-gray-900 currency">
                {formatCurrency(stats.todayDonations)}
              </p>
            </div>
          </div>
        </div>

        {/* 이번 달 헌금 */}
        <div className="card">
          <div className="flex items-center">
            <div className="flex-shrink-0">
              <TrendingUp className="w-8 h-8 text-purple-500" />
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-500">이번 달 헌금</p>
              <p className="text-2xl font-bold text-gray-900 currency">
                {formatCurrency(stats.thisMonthDonations)}
              </p>
            </div>
          </div>
        </div>

        {/* 이번 달 일자 */}
        <div className="card">
          <div className="flex items-center">
            <div className="flex-shrink-0">
              <Calendar className="w-8 h-8 text-orange-500" />
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-500">오늘 날짜</p>
              <p className="text-2xl font-bold text-gray-900">
                {new Date().toLocaleDateString('ko-KR', {
                  month: 'short',
                  day: 'numeric'
                })}
              </p>
            </div>
          </div>
        </div>
      </div>

      {/* 최근 헌금 내역 */}
      <div className="card">
        <div className="flex items-center justify-between mb-6">
          <h3 className="text-lg font-medium text-gray-900">최근 헌금 내역</h3>
          <button className="btn btn-secondary text-sm">
            <Download className="w-4 h-4 mr-2" />
            내보내기
          </button>
        </div>

        {stats.recentDonations.length === 0 ? (
          <div className="text-center py-8 text-gray-500">
            아직 등록된 헌금이 없습니다.
          </div>
        ) : (
          <div className="overflow-x-auto">
            <table className="table">
              <thead>
                <tr>
                  <th>날짜</th>
                  <th>헌금자</th>
                  <th>종류</th>
                  <th>금액</th>
                </tr>
              </thead>
              <tbody>
                {stats.recentDonations.map((donation) => (
                  <tr key={donation.donation_id}>
                    <td>{formatDate(donation.donation_date)}</td>
                    <td>
                      {donation.members?.member_name || donation.donor_name || '익명'}
                    </td>
                    <td>
                      <span className="px-2 py-1 text-xs font-medium bg-primary-100 text-primary-800 rounded-full">
                        {donation.donation_types?.type_name || '기타'}
                      </span>
                    </td>
                    <td className="font-medium currency">
                      {formatCurrency(donation.amount)}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </div>

      {/* 빠른 액션 */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <Link to="/donations" className="card hover:shadow-lg transition-shadow cursor-pointer">
          <div className="text-center">
            <Plus className="w-12 h-12 text-primary-500 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">헌금 등록</h3>
            <p className="text-sm text-gray-500">새로운 헌금을 등록합니다</p>
          </div>
        </Link>

        <Link to="/members" className="card hover:shadow-lg transition-shadow cursor-pointer">
          <div className="text-center">
            <Users className="w-12 h-12 text-blue-500 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">교인 관리</h3>
            <p className="text-sm text-gray-500">교인 정보를 관리합니다</p>
          </div>
        </Link>

        <div className="card hover:shadow-lg transition-shadow cursor-pointer">
          <div className="text-center">
            <TrendingUp className="w-12 h-12 text-green-500 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">통계 보기</h3>
            <p className="text-sm text-gray-500">상세한 통계를 확인합니다</p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Dashboard;